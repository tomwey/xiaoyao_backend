<li class="file input required" id="media_file_input"><label for="media_file" class="label">投票选项视频<abbr title="必须的">*</abbr></label>
  <input id="media_file" type="hidden" name="vote_item[video]">

  <button id="video-file">选择视频文件</button> <span id="video-file-name">未选择文件</span> <span class="progress-info" style="color: red;"></span>

  <p class="inline-hints">支持MP4, MOV, MPEG格式</p>     
</li>

<% 
# key = "uploads/video/#{SecureRandom.uuid}.mp4"
bucket = "#{SiteConfig.qiniu_bucket}"
filename = "#{SecureRandom.uuid}.mp4"
key = "uploads/vote_items/" + filename

#构建上传策略
put_policy = Qiniu::Auth::PutPolicy.new(
    bucket,      # 存储空间
    key,     # 最终资源名，可省略，即缺省为“创建”语义，设置为nil为普通上传 
    72000000    #token过期时间，默认为3600s
)

# put_policy.scope = bucket

#生成上传 Token
uptoken = Qiniu::Auth.generate_uptoken(put_policy)
%>

<script src="http://cdn.staticfile.org/Plupload/2.1.1/plupload.full.min.js"></script>
<script src="http://cdn.staticfile.org/qiniu-js-sdk/1.0.14-beta/qiniu.min.js"></script>

<script>
  
var uploader = Qiniu.uploader({
    runtimes: 'html5,flash,html4',      // 上传模式,依次退化
    browse_button: 'video-file',         // 上传选择的点选按钮，**必需**
    uptoken : '<%= uptoken %>', // uptoken 是上传凭证，由其他程序生成
    get_new_uptoken: false,
    domain: 'http://<%= SiteConfig.qiniu_bucket_domain %>',     // bucket 域名，下载资源时用到，**必需**
    container: 'media_file_input',             // 上传区域 DOM ID，默认是 browser_button 的父元素，
    max_file_size: '100000mb',             // 最大文件体积限制
    flash_swf_url: 'http://cdn.staticfile.org/Plupload/2.1.1/Moxie.swf',  //引入 flash,相对路径
    max_retries: 3,                     // 上传失败最大重试次数
    dragdrop: true,                     // 开启可拖曳上传
    drop_element: 'media_file_input',          // 拖曳上传区域元素的 ID，拖曳文件或文件夹后可触发上传
    chunk_size: '4mb',                  // 分块上传时，每块的体积
    init: {
        'FilesAdded': function(up, files) {
          var file = files[0];
          $("#video-file-name").text(file.name);
          
          if (file.type != "video/mp4" && file.type != "video/mov" && file.type != "video/mpeg") {
            
            plupload.each(files, function(ff) {
              up.removeFile(ff.id);
            });
            
            uploader.stop();
            
            alert('请选择视频文件！')
            // return false;
            
          } else {
            // return true;

            uploader.start();
          }
        },
        'BeforeUpload': function(up, file) {
               // 每个文件上传前,处理相关的事情
        },
        'UploadProgress': function(up, file) {
          $('input[type=submit]').prop('disabled', true);
          
          $(".progress-info").text('上传进度：' + up.total.percent + '%');
        },
        'FileUploaded': function(up, file, info) {
               $("#media_file").val('<%= filename %>');
               $(".progress-info").text('上传完成');
               
               $('input[type=submit]').prop('disabled', false);
        },
        'Error': function(up, err, errTip) {
               //上传出错时,处理相关的事情
          $(".progress-info").text('上传失败');
        },
        'UploadComplete': function() {
               //队列文件处理完毕后,处理相关的事情
        },
        'Key': function(up, file) {
            // 若想在前端对每个文件的key进行个性化处理，可以配置该函数
            // 该配置必须要在 unique_names: false , save_key: false 时才生效

            var key = "<%= key %>";
            // do something with key here
            return key
        }
    }
});
</script>
